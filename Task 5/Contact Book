import tkinter as tk
from tkinter import messagebox

# Create a dictionary to store contacts
contacts = {}

# Function to add a new contact
def add_contact():
    name = name_entry.get()
    phone_number = phone_entry.get()
    email = email_entry.get()
    address = address_entry.get()

    if name and phone_number:
        contacts[name] = {'phone_number': phone_number, 'email': email, 'address': address}
        messagebox.showinfo("Success", f"Contact {name} added successfully.")
        clear_fields()
    else:
        messagebox.showerror("Error", "Name and phone number are required.")

# Function to view the contact list
def view_contact_list():
    contact_list.delete(0, tk.END)
    for name in contacts:
        contact_list.insert(tk.END, name)

# Function to view a contact's details
def view_contact_details(event):
    selected_contact = contact_list.get(contact_list.curselection())
    if selected_contact in contacts:
        contact_info = contacts[selected_contact]
        details_text.delete(1.0, tk.END)
        details_text.insert(tk.END, f"Name: {selected_contact}\n")
        details_text.insert(tk.END, f"Phone: {contact_info['phone_number']}\n")
        details_text.insert(tk.END, f"Email: {contact_info['email']}\n")
        details_text.insert(tk.END, f"Address: {contact_info['address']}")
    else:
        details_text.delete(1.0, tk.END)
        details_text.insert(tk.END, "Contact not found")

# Function to clear input fields
def clear_fields():
    name_entry.delete(0, tk.END)
    phone_entry.delete(0, tk.END)
    email_entry.delete(0, tk.END)
    address_entry.delete(0, tk.END)

# Function to search for a contact
def search_contact():
    search_name = search_name_entry.get()
    search_phone = search_phone_entry.get()
    contact_list.delete(0, tk.END)

    for name, contact_info in contacts.items():
        if (search_name and search_name in name) or (search_phone and search_phone in contact_info['phone_number']):
            contact_list.insert(tk.END, name)

# Function to update a contact
def update_contact():
    selected_contact = contact_list.get(contact_list.curselection())
    if selected_contact in contacts:
        name = update_name_entry.get()
        phone_number = update_phone_entry.get()
        email = update_email_entry.get()
        address = update_address_entry.get()

        if name and phone_number:
            contacts[selected_contact] = {'phone_number': phone_number, 'email': email, 'address': address}
            messagebox.showinfo("Success", f"Contact {selected_contact} updated successfully.")
            clear_fields()
            view_contact_list()
        else:
            messagebox.showerror("Error", "Name and phone number are required.")
    else:
        messagebox.showerror("Error", "Please select a contact to update.")

# Function to delete a contact
def delete_contact():
    selected_contact = contact_list.get(contact_list.curselection())
    if selected_contact in contacts:
        del contacts[selected_contact]
        messagebox.showinfo("Success", f"Contact {selected_contact} deleted successfully.")
        clear_fields()
        view_contact_list()
        details_text.delete(1.0, tk.END)
    else:
        messagebox.showerror("Error", "Please select a contact to delete.")

# Create the main window
root = tk.Tk()
root.title("Contact Management System")

# Create and configure input fields
name_label = tk.Label(root, text="Name:")
name_label.pack()
name_entry = tk.Entry(root)
name_entry.pack()

phone_label = tk.Label(root, text="Phone:")
phone_label.pack()
phone_entry = tk.Entry(root)
phone_entry.pack()

email_label = tk.Label(root, text="Email:")
email_label.pack()
email_entry = tk.Entry(root)
email_entry.pack()

address_label = tk.Label(root, text="Address:")
address_label.pack()
address_entry = tk.Entry(root)
address_entry.pack()

# Create buttons
add_button = tk.Button(root, text="Add Contact", command=add_contact)
add_button.pack()

view_button = tk.Button(root, text="View Contact List", command=view_contact_list)
view_button.pack()

# Create contact listbox
contact_list = tk.Listbox(root)
contact_list.pack()
contact_list.bind('<<ListboxSelect>>', view_contact_details)

# Create a label for displaying contact details
details_label = tk.Label(root, text="Contact Details:")
details_label.pack()

# Create a text widget to display contact details
details_text = tk.Text(root, height=6, width=40)  # Reduced height here
details_text.pack()

# Create a frame for search and update functionality
search_frame = tk.Frame(root)
search_frame.pack()

search_name_label = tk.Label(search_frame, text="Search Name:")
search_name_label.pack()
search_name_entry = tk.Entry(search_frame)
search_name_entry.pack()

search_phone_label = tk.Label(search_frame, text="Search Phone:")
search_phone_label.pack()
search_phone_entry = tk.Entry(search_frame)
search_phone_entry.pack()

search_button = tk.Button(search_frame, text="Search Contact", command=search_contact)
search_button.pack()

# Create a frame for update functionality
update_frame = tk.Frame(root)
update_frame.pack()

update_name_label = tk.Label(update_frame, text="Update Name:")
update_name_label.pack()
update_name_entry = tk.Entry(update_frame)
update_name_entry.pack()

update_phone_label = tk.Label(update_frame, text="Update Phone:")
update_phone_label.pack()
update_phone_entry = tk.Entry(update_frame)
update_phone_entry.pack()

update_email_label = tk.Label(update_frame, text="Update Email:")
update_email_label.pack()
update_email_entry = tk.Entry(update_frame)
update_email_entry.pack()

update_address_label = tk.Label(update_frame, text="Update Address:")
update_address_label.pack()
update_address_entry = tk.Entry(update_frame)
update_address_entry.pack()

update_button = tk.Button(update_frame, text="Update Contact", command=update_contact)
update_button.pack()

delete_button = tk.Button(update_frame, text="Delete Contact", command=delete_contact)
delete_button.pack()

root.mainloop()
